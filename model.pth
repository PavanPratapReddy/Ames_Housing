import torch
import torch.nn as nn
import torch.optim as optim
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import joblib

# Load dataset (Ames Housing dataset example)
df = pd.read_csv("C:\Users\pavan\OneDrive\Desktop\NEU\Pavan\EAI6010\Datasets")  # Ensure the dataset file is present
df = pd.read_csv(dataset_path)

# Selecting relevant numerical features
features = ["Lot.Area", "Year.Built", "Overall.Qual", "Total.Bsmt.SF", "Gr.Liv.Area", "Garage.Cars"]
target = "SalePrice"

# Ensure column names match the dataset (check if necessary)
df.columns = df.columns.str.replace(" ", "_")  # Replace spaces with underscores if needed

# Extract features and target
X = df[features].values
y = df[target].values.reshape(-1, 1)

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardizing features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Save the scaler (needed for Streamlit deployment)
joblib.dump(scaler, "scaler.pkl")

# Convert data to PyTorch tensors
X_train_tensor = torch.tensor(X_train, dtype=torch.float32)
y_train_tensor = torch.tensor(y_train, dtype=torch.float32)

# Define the model
class HousePriceModel(nn.Module):
    def __init__(self):
        super(HousePriceModel, self).__init__()
        self.fc1 = nn.Linear(len(features), 128)
        self.fc2 = nn.Linear(128, 64)
        self.fc3 = nn.Linear(64, 1)

    def forward(self, x):
        x = torch.relu(self.fc1(x))
        x = torch.relu(self.fc2(x))
        x = self.fc3(x)
        return x

# Initialize model
model = HousePriceModel()

# Loss and optimizer
criterion = nn.MSELoss()
optimizer = optim.Adam(model.parameters(), lr=0.01)

# Training loop
epochs = 100
for epoch in range(epochs):
    model.train()
    optimizer.zero_grad()
    outputs = model(X_train_tensor)
    loss = criterion(outputs, y_train_tensor)
    loss.backward()
    optimizer.step()

    if (epoch + 1) % 10 == 0:
        print(f"Epoch [{epoch+1}/{epochs}], Loss: {loss.item():.4f}")

# Save only model state_dict
torch.save(model.state_dict(), "model.pth")

print("Model saved as model.pth")
